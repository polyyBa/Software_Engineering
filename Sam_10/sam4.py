# Создаем класс декоратора
class my_decorator:
    def __init__(self, func):  # Инициализируем класс, принимая функцию в качестве аргумента
        self.func = func

    def __call__(self, *args, **kwargs):  # Метод вызывается при вызове декорированной функции
        print("Декоратор добавляет новое поведение к функции")  # Выводим сообщение перед выполнением функции
        return self.func(*args, **kwargs)  # Вызываем исходную функцию с переданными аргументами

# Определяем две функции, к которым будем применять декоратор
@my_decorator  # Применяем декоратор к функции greet
def greet(name):  # Определяем функцию greet
    print(f"Привет, {name}!")  # Выводим приветствие с переданным именем

@my_decorator  # Применяем декоратор к функции square
def square(n):  # Определяем функцию square
    return n * n  # Возвращаем квадрат переданного числа

# Вызываем функции
greet("Полина")  # Вызываем функцию greet с именем
result = square(5)  # Вызываем функцию square с числом
print("Результат возведения в квадрат:", result)  # Выводим результат возведения в квадрат